in vec4 v_color;
in vec2 v_texCoord;

uniform sampler2D f_texture;

//our screen resolution, set from Java whenever the display is resized
// uniform vec2 resolution;

//RADIUS of our vignette, where 0.5 results in a circle fitting the screen
const float RADIUS = 0.75;

//softness of our vignette, between 0.0 and 1.0
const float SOFTNESS = 0.45;

//sepia colour, adjust to taste
const vec3 SEPIA = vec3(1.2, 1.0, 0.8); 

void main() {

	vec2 resolution = vec2(1200.0f, 700.0f);

	//sample our texture
	vec4 texColor = texture2D(f_texture, v_texCoord);
		
	//1. VIGNETTE
	
	//determine center position
	vec2 position = (gl_FragCoord.xy / resolution.xy) - vec2(0.5);
	
	//determine the vector length of the center position
	float len = length(position);
	
	//use smoothstep to create a smooth vignette
	float vignette = smoothstep(RADIUS, RADIUS-SOFTNESS, len);
	
	//apply the vignette with 50% opacity
	texColor.rgb = mix(texColor.rgb, texColor.rgb * vignette, 0.55);
		
	//2. GRAYSCALE
	//convert to grayscale using NTSC conversion weights
	float gray = dot(texColor.rgb, vec3(0.299, 0.587, 0.114));
	
	//3. SEPIA
	//create our sepia tone from some constant value
	vec3 sepiaColor = vec3(gray) * SEPIA;
		
	// Mix Colors 75%
	texColor.rgb = mix(texColor.rgb, sepiaColor, 0.75);
		
	gl_FragColor = texColor * v_color;
}